# Github worflows for Ocean

name: CI

on: [push, pull_request]

jobs:
  main:
    name: Run
    strategy:
      # Disable `fail-fast` because even if things fail for one compiler release
      # or build flavour we still want to see how things perform with the others
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04 ]
        dc: [ dmd-2.092.1, dmd-2.093.1 ]
        flavor: [ prod, devel ]
        include:
          - { dc: dmd-2.093.1, coverage: 1, closure_check: 1 }

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
    - name: "Ensure tools/ exists"
      run: mkdir -p ${{ github.workspace }}/tools/

    - name: 'Restore ebtree from cache'
      id: cache-ebtree
      uses: actions/cache@v1
      with:
        path: ${{ github.workspace }}/tools/
        key:  ebtree

    - name: 'Download ebtree from bintray'
      if: steps.cache-ebtree.outputs.cache-hit != 'true'
      run: |
        wget -O ${{ github.workspace }}/tools/libebtree.deb https://bintray.com/sociomantic-tsunami/dlang/download_file?file_path=libebtree6_6.0.s7-rc5-xenial_amd64.deb
        wget -O ${{ github.workspace }}/tools/libebtree-dev.deb https://bintray.com/sociomantic-tsunami/dlang/download_file?file_path=libebtree6-dev_6.0.s7-rc5-xenial_amd64.deb

    - name: Install dependencies
      run: |
        sudo apt-get update && \
        sudo apt-get install -y libxslt-dev liblzo2-dev libgcrypt-dev libgpg-error-dev
        sudo dpkg -i ${{ github.workspace }}/tools/libebtree*.deb

    - name: Install compiler
      uses: dlang-community/setup-dlang@v1
      with:
        compiler: ${{ matrix.dc }}

    # Checkout this repository and its submodules
    - uses: actions/checkout@v2
      with:
        submodules: true
        # Required for codecov (codecov/codecov-action#190)
        fetch-depth: 2

    - name: Test
      run: |
        make all test V=1 F=${{ matrix.flavor }} COV=${{ matrix.coverage }}

    - name: Test closures
      if: ${{ matrix.closure_check == 1 }}
      env:
        F: ${{ matrix.flavor }}
        DFLAGS: -vgc
      run: |
        # Run tests and write compiler output to temporary file
        compiler_output=`mktemp`
        make fasttest 2>&1 > $compiler_output
        # Ensure there are no lines about closure allocations in the output.
        # Note explicit check for `grep` exit status 1, i.e. no lines found.
        ! grep -e "closure" $compiler_output

    - name: 'Upload coverage'
      if: ${{ matrix.coverage == 1 }}
      uses: codecov/codecov-action@v1
      with:
        flags: ${{ matrix.dc }}-${{ matrix.flavor }}
