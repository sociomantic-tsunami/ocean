From 9c40b4a69b772e2771d54f685c0a5f7a4a5193c5 Mon Sep 17 00:00:00 2001
From: Mihails Strasuns <mihails.strasuns.contractor@sociomantic.com>
Date: Sun, 6 Sep 2015 05:38:41 +0300
Subject: [PATCH 02/13] Stomping control implementation

---
 posix.mak         |  8 ++++--
 src/rt/lifetime.d | 80 ++++++++++++++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 82 insertions(+), 6 deletions(-)

diff --git a/posix.mak b/posix.mak
index 7175f0f..12dca19 100644
--- a/posix.mak
+++ b/posix.mak
@@ -3,6 +3,10 @@
 #    pkg_add -r gmake
 # and then run as gmake rather than make.
 
+# Don't assert on stomping prevention during tests or any other internal targets
+# See https://github.com/sociomantic/druntime/pull/14 for details
+export ASSERT_ON_STOMPING_PREVENTION=0
+
 QUIET:=@
 
 include osmodel.mak
@@ -53,10 +57,10 @@ endif
 # Set DFLAGS
 UDFLAGS:=-conf= -Isrc -Iimport -w -dip25 $(MODEL_FLAG) $(OPTIONAL_PIC)
 ifeq ($(BUILD),debug)
-	UDFLAGS += -g -debug
+	UDFLAGS += -g -debug -debug=CheckStompingPrevention
 	DFLAGS:=$(UDFLAGS)
 else
-	UDFLAGS += -O -release
+	UDFLAGS += -O -release -g -debug=CheckStompingPrevention
 	DFLAGS:=$(UDFLAGS) -inline # unittests don't compile with -inline
 endif
 
diff --git a/src/rt/lifetime.d b/src/rt/lifetime.d
index d28edf8..24c6d90 100644
--- a/src/rt/lifetime.d
+++ b/src/rt/lifetime.d
@@ -17,7 +17,7 @@ import core.stdc.string;
 import core.stdc.stdarg;
 import core.bitop;
 import core.memory;
-debug(PRINTF) import core.stdc.stdio;
+debug import core.stdc.stdio;
 static import rt.tlsgc;
 
 alias BlkInfo = GC.BlkInfo;
@@ -230,6 +230,57 @@ size_t structTypeInfoSize(const TypeInfo ti) pure nothrow @nogc
 private class ArrayAllocLengthLock
 {}
 
+// break on this to debug stomping prevention allocations
+export extern(C) void stomping_prevention_trigger ( ) pure nothrow
+{
+    debug(CheckStompingPrevention) stomping_prevention_trigger_nonpure();
+}
+
+extern(C) shared long stomping_prevention_counter;
+
+void stomping_prevention_trigger_nonpure ( ) nothrow
+{
+    import core.atomic;
+    atomicOp!"+="(stomping_prevention_counter, 1);
+
+    import core.stdc.stdlib : getenv;
+    import core.stdc.stdio : fflush, stdout, printf;
+    import core.stdc.string : strcmp;
+
+    const failure = new Exception("Stoming prevention has been triggerred");
+
+    try
+    {
+        char* flag = getenv("ASSERT_ON_STOMPING_PREVENTION".ptr);
+
+        if (flag)
+        {
+            if (strcmp(flag, "1") == 0)
+                throw failure;
+        }
+        else
+        {
+            flag = getenv("ALLOW_STOMPING_PREVENTION".ptr);
+            if (flag && strcmp(flag, "0") == 0)
+                throw failure;
+        }
+    }
+    catch (Exception e)
+    {
+        try
+        {
+            auto msg = e.toString();
+            printf("\n%*s\n", msg.length, msg.ptr);
+        }
+        catch (Exception)
+        {
+            printf("\nStoming prevention has been triggerred\n");
+        }
+
+        fflush(stdout);
+        abort();
+    }
+}
 
 /**
   Set the allocated length of the array block.  This is called
@@ -282,14 +333,21 @@ bool __setArrayAllocLength(ref BlkInfo info, size_t newlength, bool isshared, co
         {
             if(isshared)
             {
-                return cas(cast(shared)length, cast(ubyte)oldlength, cast(ubyte)newlength);
+                bool same_length = cas(cast(shared)length, cast(ubyte)oldlength,
+                    cast(ubyte)newlength);
+                if (!same_length)
+                    stomping_prevention_trigger();
+                return same_length;
             }
             else
             {
                 if(*length == cast(ubyte)oldlength)
                     *length = cast(ubyte)newlength;
                 else
+                {
+                    stomping_prevention_trigger();
                     return false;
+                }
             }
         }
         else
@@ -313,14 +371,21 @@ bool __setArrayAllocLength(ref BlkInfo info, size_t newlength, bool isshared, co
         {
             if(isshared)
             {
-                return cas(cast(shared)length, cast(ushort)oldlength, cast(ushort)newlength);
+                bool same_length = cas(cast(shared)length, cast(ushort)oldlength,
+                    cast(ushort)newlength);
+                if (!same_length)
+                    stomping_prevention_trigger();
+                return same_length;
             }
             else
             {
                 if(*length == oldlength)
                     *length = cast(ushort)newlength;
                 else
+                {
+                    stomping_prevention_trigger();
                     return false;
+                }
             }
         }
         else
@@ -344,14 +409,21 @@ bool __setArrayAllocLength(ref BlkInfo info, size_t newlength, bool isshared, co
         {
             if(isshared)
             {
-                return cas(cast(shared)length, cast(size_t)oldlength, cast(size_t)newlength);
+                bool same_length = cas(cast(shared)length, cast(size_t)oldlength,
+                    cast(size_t)newlength);
+                if (!same_length)
+                    stomping_prevention_trigger();
+                return same_length;
             }
             else
             {
                 if(*length == oldlength)
                     *length = newlength;
                 else
+                {
+                    stomping_prevention_trigger();
                     return false;
+                }
             }
         }
         else
-- 
2.7.4

