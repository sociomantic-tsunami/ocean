From b96097c11822f2e1760567c41be64cbc9c65134b Mon Sep 17 00:00:00 2001
From: Mathias Lang <mathias.lang@sociomantic.com>
Date: Fri, 24 Jul 2015 17:57:13 +0200
Subject: [PATCH 01/13] Pick upstream GC.stats implementation

Picks changes from https://github.com/dlang/druntime/pull/1610
---
 mak/SRCS          |  1 -
 src/core/memory.d | 20 ++++++++++++++++++
 src/gc/gc.d       | 62 ++++++++++++++++++-------------------------------------
 src/gc/proxy.d    | 20 +++++++-----------
 src/gc/stats.d    | 27 ------------------------
 5 files changed, 47 insertions(+), 83 deletions(-)
 delete mode 100644 src/gc/stats.d

diff --git a/mak/SRCS b/mak/SRCS
index 9a54c8c..49fb7e1 100644
--- a/mak/SRCS
+++ b/mak/SRCS
@@ -240,7 +240,6 @@ SRCS=\
 	src\gc\os.d \
 	src\gc\pooltable.d \
 	src\gc\proxy.d \
-	src\gc\stats.d \
 	\
 	src\rt\aApply.d \
 	src\rt\aApplyR.d \
diff --git a/src/core/memory.d b/src/core/memory.d
index c222831..9996a74 100644
--- a/src/core/memory.d
+++ b/src/core/memory.d
@@ -138,6 +138,7 @@ private
     }
 
     extern (C) BlkInfo_ gc_query( void* p ) pure nothrow;
+    extern (C) GC.Stats gc_stats ( ) nothrow @nogc;
 
     extern (C) void gc_addRoot( in void* p ) nothrow;
     extern (C) void gc_addRange( in void* p, size_t sz, const TypeInfo ti = null ) nothrow @nogc;
@@ -157,6 +158,17 @@ struct GC
     @disable this();
 
     /**
+     * Aggregation of GC stats to be exposed via public API
+     */
+    static struct Stats
+    {
+        /// number of used bytes on the GC heap (might only get updated after a collection)
+        size_t usedSize;
+        /// number of free bytes on the GC heap (might only get updated after a collection)
+        size_t freeSize;
+    }
+
+    /**
      * Enables automatic garbage collection behavior if collections have
      * previously been suspended by a call to disable.  This function is
      * reentrant, and must be called once for every call to disable before
@@ -657,6 +669,14 @@ struct GC
         return gc_query( p );
     }
 
+    /**
+     * Returns runtime stats for currently active GC implementation
+     * See `core.memory.GC.Stats` for list of available metrics.
+     */
+    static Stats stats() nothrow
+    {
+        return gc_stats();
+    }
 
     /**
      * Adds an internal root pointing to the GC memory block referenced by p.
diff --git a/src/gc/gc.d b/src/gc/gc.d
index 955560c..f810b65 100644
--- a/src/gc/gc.d
+++ b/src/gc/gc.d
@@ -39,7 +39,6 @@ version = STACKGROWSDOWN;       // growing the stack means subtracting from the
 /***************************************************/
 
 import gc.bits;
-import gc.stats;
 import gc.os;
 import gc.config;
 
@@ -50,6 +49,7 @@ import core.stdc.string : memcpy, memset, memmove;
 import core.bitop;
 import core.sync.mutex;
 import core.thread;
+
 static import core.memory;
 private alias BlkAttr = core.memory.GC.BlkAttr;
 private alias BlkInfo = core.memory.GC.BlkInfo;
@@ -1256,8 +1256,8 @@ struct GC
             GCStats stats;
 
             getStats(stats);
-            debug(PRINTF) printf("poolsize = %zx, usedsize = %zx, freelistsize = %zx\n",
-                    stats.poolsize, stats.usedsize, stats.freelistsize);
+            debug(PRINTF) printf("heapSize = %zx, freeSize = %zx\n",
+                stats.heapSize, stats.freeSize);
         }
 
         gcx.log_collect();
@@ -1291,64 +1291,42 @@ struct GC
     }
 
 
-    /**
-     * Retrieve statistics about garbage collection.
-     * Useful for debugging and tuning.
-     */
-    void getStats(out GCStats stats) nothrow
+    core.memory.GC.Stats stats() nothrow
     {
+        typeof(return) ret;
         gcLock.lock();
-        getStatsNoSync(stats);
+        getStatsNoSync(ret);
         gcLock.unlock();
+        return ret;
     }
 
 
     //
     //
     //
-    private void getStatsNoSync(out GCStats stats) nothrow
+    private void getStatsNoSync(out core.memory.GC.Stats stats) nothrow
     {
-        size_t psize = 0;
-        size_t usize = 0;
-        size_t flsize = 0;
-
-        size_t n;
-        size_t bsize = 0;
-
-        //debug(PRINTF) printf("getStats()\n");
-        memset(&stats, 0, GCStats.sizeof);
-
-        for (n = 0; n < gcx.npools; n++)
-        {   Pool *pool = gcx.pooltable[n];
-
-            psize += pool.npages * PAGESIZE;
-            for (size_t j = 0; j < pool.npages; j++)
+        foreach (pool; gcx.pooltable[0 .. gcx.npools])
+        {
+            foreach (bin; pool.pagetable[0 .. pool.npages])
             {
-                Bins bin = cast(Bins)pool.pagetable[j];
                 if (bin == B_FREE)
-                    stats.freeblocks++;
-                else if (bin == B_PAGE)
-                    stats.pageblocks++;
-                else if (bin < B_PAGE)
-                    bsize += PAGESIZE;
+                    stats.freeSize += PAGESIZE;
+                else
+                    stats.usedSize += PAGESIZE;
             }
         }
 
-        for (n = 0; n < B_PAGE; n++)
+        size_t freeListSize;
+        foreach (n; 0 .. B_PAGE)
         {
-            //debug(PRINTF) printf("bin %d\n", n);
+            immutable sz = binsize[n];
             for (List *list = gcx.bucket[n]; list; list = list.next)
-            {
-                //debug(PRINTF) printf("\tlist %p\n", list);
-                flsize += binsize[n];
-            }
+                freeListSize += sz;
         }
 
-        usize = bsize - flsize;
-
-        stats.poolsize = psize;
-        stats.usedsize = bsize - flsize;
-        stats.freelistsize = flsize;
+        stats.usedSize -= freeListSize;
+        stats.freeSize += freeListSize;
     }
 }
 
diff --git a/src/gc/proxy.d b/src/gc/proxy.d
index e8d96cd..091ba3d 100644
--- a/src/gc/proxy.d
+++ b/src/gc/proxy.d
@@ -14,9 +14,10 @@
 module gc.proxy;
 
 import gc.gc;
-import gc.stats;
 import core.stdc.stdlib;
 
+static import core.memory;
+
 private
 {
     __gshared GC _gc;
@@ -53,6 +54,7 @@ private
             size_t  function(void*) gc_sizeOf;
 
             BlkInfo function(void*) gc_query;
+            core.memory.GC.Stats function() gc_stats;
 
             void function(void*) gc_addRoot;
             void function(void*, size_t, const TypeInfo ti) gc_addRange;
@@ -89,6 +91,7 @@ private
         pthis.gc_sizeOf = &gc_sizeOf;
 
         pthis.gc_query = &gc_query;
+        pthis.gc_stats = &gc_stats;
 
         pthis.gc_addRoot = &gc_addRoot;
         pthis.gc_addRange = &gc_addRange;
@@ -256,20 +259,11 @@ extern (C)
         return proxy.gc_query( p );
     }
 
-    // NOTE: This routine is experimental. The stats or function name may change
-    //       before it is made officially available.
-    GCStats gc_stats() nothrow
+    core.memory.GC.Stats gc_stats() nothrow
     {
         if( proxy is null )
-        {
-            GCStats stats = void;
-            _gc.getStats( stats );
-            return stats;
-        }
-        // TODO: Add proxy support for this once the layout of GCStats is
-        //       finalized.
-        //return proxy.gc_stats();
-        return GCStats.init;
+            return _gc.stats();
+        return proxy.gc_stats();
     }
 
     void gc_addRoot( void* p ) nothrow
diff --git a/src/gc/stats.d b/src/gc/stats.d
deleted file mode 100644
index 2d6a01a..0000000
--- a/src/gc/stats.d
+++ /dev/null
@@ -1,27 +0,0 @@
-/**
- * Contains a struct for storing GC statistics.
- *
- * Copyright: Copyright Digital Mars 2005 - 2013.
- * License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).
- * Authors:   Walter Bright, Sean Kelly
- */
-
-/*          Copyright Digital Mars 2005 - 2013.
- * Distributed under the Boost Software License, Version 1.0.
- *    (See accompanying file LICENSE or copy at
- *          http://www.boost.org/LICENSE_1_0.txt)
- */
-module gc.stats;
-
-
-/**
- *
- */
-struct GCStats
-{
-    size_t poolsize;        // total size of pool
-    size_t usedsize;        // bytes allocated
-    size_t freeblocks;      // number of blocks marked FREE
-    size_t freelistsize;    // total of memory on free lists
-    size_t pageblocks;      // number of blocks marked PAGE
-}
-- 
2.7.4

